{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red0\green0\blue0;\red170\green13\blue145;
\red28\green0\blue207;\red196\green26\blue22;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c0\c0\c0;\csgenericrgb\c66500\c5200\c56900;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c77000\c10200\c8600;}
\margl1440\margr1440\vieww10800\viewh12460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\
\
What we need to learn:\
General syntax for Python\
How to parse through a string\
How to remove characters from a string\
Just in general how to work with images\
How to resize images\
How to create a GUI\
How to create an image of text given the string and the font\
\
\
NOTE: Thumbnail should be in 16:9 resolution\
Your program should return "UMeMe 53 - Mingee (Falco) vs Heartstrings (Sheik) Winners Semis" as a string.\
\
Splitting up the tasks:\
\
	Getting the variables that we need from input.txt\
		-figure out how to take input from a text file\
		-create function that parses string that stops on specified character (split()?)\
		-label all character names and colors\
		-create function that can \
\
\
\
	Figuring out the PNG:\
		-Use the structure of project 2, create image and matrix class, pixel struct.\
		-create a function that can stitch images together, e.g. top middle and bottom\
		-create a function that can paste an image over another image, e.g. character render 		over the main picture\
	\
\
\
		Function that pastes an image over another in C++:\
\
\
		\
		void paste(Image & base, const Image & img, int x, int y)\{\
			for(int i = x; i < (x + img.width()); i++)\{\
				for(int j = y; j < (y + img.height()); j++)\{\
					base.red_channel.at(x,y) == img.red_channel.at(i-x, j-y);\
					base.green_channel.at(x,y) == img.green_channel.at(i-x, j-y);\
					base.blue_channel.at(x,y) == img.blue_channel.at(i-x, j-y);\
				\}\
			\}\
		\}\
\
  \

\f1\fs22 \cf2 \CocoaLigature0 // REQUIRES: img points to an Image\cf3 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //           0 < width <= MAX_MATRIX_WIDTH\cf3 \
\cf2 //           0 < height <= MAX_MATRIX_HEIGHT\cf3 \
\cf2 // MODIFIES: *img\cf3 \
\cf2 // EFFECTS:  Initializes the Image with the given width and height.\cf4 \
void\cf3  Image_init(Image* img, \cf4 int\cf3  width, \cf4 int\cf3  height) \{\
  assert(img);\
  assert(\cf5 0\cf3  < width && width <= MAX_MATRIX_WIDTH);\
  assert(\cf5 0\cf3  < height && height <= MAX_MATRIX_HEIGHT);\
\
  img->height = height;\
  img->width = width;\
  Matrix_init(&img->red_channel, width, height);\
  Matrix_init(&img->green_channel, width, height);\
  Matrix_init(&img->blue_channel, width, height);\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 \
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \CocoaLigature0 // REQUIRES: img points to an Image\cf3 \
\cf2 //           is contains an image in PPM format without comments\cf3 \
\cf2 //           (any kind of whitespace is ok)\cf3 \
\cf2 // MODIFIES: *img\cf3 \
\cf2 // EFFECTS:  Initializes the Image by reading in an image in PPM format\cf3 \
\cf2 //           from the given input stream.\cf3 \
\cf2 // NOTE:     See the project spec for a discussion of PPM format.\cf3 \
\cf4 void\cf3  Image_init(Image* img, std::istream& is) \{\
  assert(img);\
  \cf4 int\cf3  width, height, max_intensity;\
  std::string file;\
  is >> file;\
  is >> width;\
  is >> height;\
  is >> max_intensity;\
\
  assert(file == \cf6 "P3"\cf3 );\
  assert(max_intensity == \cf5 255\cf3 );\
  \
  Image_init(img,width,height);\
  \
  \cf4 for\cf3  (\cf4 int\cf3  i = \cf5 0\cf3 ; i < height; i++) \{\
    \cf4 for\cf3  (\cf4 int\cf3  j = \cf5 0\cf3 ; j < width; j++) \{\
      Pixel pixel;\
      is >> pixel.r;\
      is >> pixel.g;\
      is >> pixel.b;\
      Image_set_pixel(img, i, j, pixel);\
    \}\
  \}\
\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \CocoaLigature1 \
\
\
\
\
Character Colors:\
Bower: Neutral, Red, Blue, Black\
Captain Falcon: Neutral, Red, Pink, Green, Blue, Black\
Donkey Kong: Neutral, Black, Red, Blue, Green\
Dr. Mario: Neutral, Red, Blue, Green, Black\
Falco: Neutral, Red, White, Green\
Fox: Neutral, Red, Blue, Green\
Ganondorf: Neutral, Red, Blue, Green, Purple\
Ice Climbers: Neutral, Green, Orange, Red\
Jigglypuff: Neutral, Red, Blue, Green, Yellow\
Kirby: Neutral, Yellow, Blue, Red, Green, White\
Link: Neutral, Red, Blue, Black, White\
Luigi: Neutral, White, Blue, Pink\
Mario: Neutral, Yellow, Black, Blue, Green\
Marth: Neutral, Red, Green, Black, White\
Mewtwo: Neutral, Red, Blue, Green\
Mr. Game & Watch: Neutral, Red, Blue, Green\
Ness: Neutral, Yellow, Blue, Green\
Peach: Neutral, Yellow, White, Blue, Green\
Pichu: Neutral, Red, Blue, Green\
Pikachu: Neutral, Red, Blue, Green\
Roy: Neutral, Red, Blue, Green, Yellow\
Samus: Neutral, Pink, Black, Green, Purple\
Sheik: Neutral, Red, Blue, Green, White\
Yoshi: Neutral, Red, Blue, Yellow, Pink, Cyan\
Young Link: Neutral, Red, Blue, White, Black\
Zelda: Neutral, Red, Blue, Green, White\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Functions:\
resize_to_boundaries: Takes in an image and boundaries, and returns a new image that has been resized to fit within those boundaries, or perhaps edits the image that is put in.\
remove_character: Takes in a string and a character and removes all of those characters from the given string\
place_image: puts the top left corner of our image at the coordinate specified, this makes it easy to change where we put the image\
\
\
Questions: Will we be given MID.PNG without versus on it? It seems easier to swap out the versus pictures instead of putting one over the other since you\'92d have to match up the new versus and the MID.PNG colorwise and also ensure that the old versus is completely covered by the new image.\
}